{"version":3,"sources":["actions/actionCrud.js","actions/actionTypes.js","components/ServiceCrud.js","components/ServiceList.js","components/ServiceFilter.js","App.js","serviceWorker.js","reducers/serviceList.js","reducers/serviceCrud.js","reducers/serviceFilter.js","store/index.js","index.js"],"names":["changeServiceField","name","value","type","payload","ServiceCrud","item","useSelector","state","serviceCrud","dispatch","useDispatch","handleChange","evt","target","onSubmit","id","price","preventDefault","className","onChange","onClick","ServiceList","items","serviceList","map","o","key","show","obj","editService","handleEdit","removeService","ServiceFilter","htmlFor","filterService","App","Boolean","window","location","hostname","match","initialState","nanoid","reducer","combineReducers","action","Number","idToRemove","filter","service","filter_item","toLowerCase","indexOf","toString","serviceFilter","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82a18e9f.chunk.js","sourcesContent":["import {\n  ADD_SERVICE,\n  REMOVE_SERVICE,\n  CHANGE_SERVICE_FIELD,\n  EDIT_SERVICE,\n  FILTER_SERVICE,\n} from \"./actionTypes\";\n\nexport function addService(id, name, price) {\n  return { type: ADD_SERVICE, payload: { id, name, price } };\n}\n\nexport function removeService(id) {\n  return { type: REMOVE_SERVICE, payload: { id } };\n}\n\nexport function changeServiceField(name, value) {\n  return { type: CHANGE_SERVICE_FIELD, payload: { name, value } };\n}\n\nexport function editService(id, name, price) {\n  return { type: EDIT_SERVICE, payload: { id, name, price } };\n}\n\nexport function filterService(value) {\n  return { type: FILTER_SERVICE, payload: { value } };\n}\n","export const ADD_SERVICE = \"ADD_SERVICE\";\nexport const REMOVE_SERVICE = \"REMOVE_SERVICE\";\nexport const CHANGE_SERVICE_FIELD = \"CHANGE_SERVICE_FIELD\";\nexport const EDIT_SERVICE = \"EDIT_SERVICE\";\nexport const FILTER_SERVICE = \"FILTER_SERVICE\";\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeServiceField, addService } from \"../actions/actionCrud\";\n\nfunction ServiceCrud() {\n  const item = useSelector((state) => state.serviceCrud);\n  const dispatch = useDispatch();\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    dispatch(changeServiceField(name, value));\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    dispatch(addService(item.id, item.name, item.price));\n  };\n\n  const handleCancel = (evt) => {\n    evt.preventDefault();\n    dispatch(changeServiceField('id', ''));\n    dispatch(changeServiceField('name', ''));\n    dispatch(changeServiceField('price', ''));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className='form'>\n      <input name=\"name\" onChange={handleChange} value={item.name} />\n      <input name=\"price\" onChange={handleChange} value={item.price} />\n      <button type=\"submit\">Save</button>\n      <button type=\"button\" onClick={handleCancel}>\n        Cancel\n      </button>\n    </form>\n  );\n}\n\nexport default ServiceCrud;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { removeService, editService } from \"../actions/actionCrud\";\n\nfunction ServiceList() {\n  const items = useSelector((state) => state.serviceList);\n  const dispatch = useDispatch();\n\n  const handleRemove = (id) => {\n    dispatch(removeService(id));\n  };\n\n  const handleEdit = (obj) => {\n    const { id, name, price } = obj;\n    dispatch(editService(id, name, price));\n  };\n\n  return (\n    <ul>\n      {items.map((o) => (\n        <li key={o.id} className={o.show ? \"li_item\" : \"hidden\"}>\n          {o.name} {o.price}\n          <button onClick={() => handleEdit(o)}>✎</button>\n          <button onClick={() => handleRemove(o.id)}>✕</button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ServiceList;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { filterService } from \"../actions/actionCrud\";\n\nfunction ServiceFilter() {\n  const dispatch = useDispatch();\n\n  const handleChange = (evt) => {\n    evt.preventDefault();\n    const { value } = evt.target;\n    dispatch(filterService(value));\n  };\n\n  return (\n    <div className=\"filter_form\">\n      <label htmlFor=\"filter\">Фильтр: </label>\n      <input className=\"filter_input\" name=\"filter\" onChange={handleChange} />\n    </div>\n  );\n}\n\nexport default ServiceFilter;\n","import React from \"react\";\nimport ServiceCrud from \"./components/ServiceCrud\";\nimport ServiceList from \"./components/ServiceList\";\nimport ServiceFilter from \"./components/ServiceFilter\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <ServiceCrud />\n      <ServiceFilter />\n      <ServiceList />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { nanoid } from \"nanoid\";\nimport {\n  ADD_SERVICE,\n  REMOVE_SERVICE,\n  FILTER_SERVICE,\n} from \"../actions/actionTypes\";\n\nconst initialState = [\n  { id: nanoid(), name: \"Замена стекла\", price: 21000, show: true },\n  { id: nanoid(), name: \"Замена дисплея\", price: 25000, show: true },\n];\n\nexport default function serviceListReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_SERVICE:\n      const { id, name, price } = action.payload;\n      if (!id) {\n        return [\n          ...state,\n          { id: nanoid(), name, price: Number(price), show: true },\n        ];\n      } else {\n        return state.map((o) =>\n          o.id !== id\n            ? o\n            : { id: id, name: name, price: Number(price), show: true }\n        );\n      }\n    case REMOVE_SERVICE:\n      const { id: idToRemove } = action.payload;\n      return state.filter((service) => service.id !== idToRemove);\n    case FILTER_SERVICE: {\n      const { value } = action.payload;\n      const filter_item = state.map((service) => {\n        const name = service.name.toLowerCase();\n        if (name.indexOf(value.toLowerCase()) !== -1) {\n          return { ...service, show: true };\n        }\n        return { ...service, show: false };\n      });\n      return filter_item;\n    }\n    default:\n      return state;\n  }\n}\n","import {\n  CHANGE_SERVICE_FIELD,\n  EDIT_SERVICE,\n  ADD_SERVICE,\n  REMOVE_SERVICE,\n} from \"../actions/actionTypes\";\n\nconst initialState = {\n  id: null,\n  name: \"\",\n  price: \"\",\n};\n\nexport default function serviceCrudReducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_SERVICE_FIELD:\n      const { name, value } = action.payload;\n      return { ...state, [name]: value };\n    case EDIT_SERVICE:\n      return { ...action.payload, price: action.payload.price.toString() };\n    case ADD_SERVICE:\n      return initialState;\n    case REMOVE_SERVICE:\n      const { id } = action.payload;\n      if (id && id === state.id) {\n        return initialState;\n      } else {\n        return state;\n      }\n    default:\n      return state;\n  }\n}\n","import { FILTER_SERVICE } from \"../actions/actionTypes\";\n\nconst initialState = {\n  value: \"\",\n};\n\nexport default function serviceFilterReducer(state = initialState, action) {\n  switch (action.type) {\n    case FILTER_SERVICE:\n      const { value } = action.payload;\n      return { ...state, value: value };\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport serviceListReducer from '../reducers/serviceList';\nimport serviceCrudReducer from '../reducers/serviceCrud';\nimport serviceFilterReducer from '../reducers/serviceFilter';\n\nconst reducer = combineReducers({\n  serviceList: serviceListReducer,\n  serviceCrud: serviceCrudReducer,\n  serviceFilter: serviceFilterReducer,\n});\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}